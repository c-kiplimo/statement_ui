type AccountStatement = {
    accountDTO: {
      accountId: string;
      accountTitle: string;
      accountType: string;
      currency: string;
      category: string;
      accountOfficer: string;
      customerId: number;
      statementFrequency: string;
      highVolume: boolean;
      recordStatus: boolean ;
      dateCreated: Date ;
    };
    accountSnapshot: {
      snapshotDate: number;
      balance: number;
      type: string;
    };
    customer: {
      customerId: number;
      customerName: string;
      deptAcctOfficer: string;
      mobileNumber: string;
      email: string;
      language: string;
      postingRestrict: string;
      branch: string;
      address: string;
      country: string;
      customerStatus: boolean;
      customerGroup: string;
      recordStatus: boolean;
    };
    statementEntries: Array<{
      statementEntryId: number;
      accountId: string;
      amountLcy: string;
      currencyLcy: string;
      amountFcy: string;
      amount: number;
      transactionCode: string;
      customerId: number;
      accountOfficer: string;
      productCategory: string;
      valueDate: string;
      currency: string;
      positionType: string;
      ourReference: string;
      exposureDate: string;
      currencyMarket: string;
      departmentCode: string;
      transReference: string ;
      systemId: string ;
      bookingDate: string;
      consolKey: string ;
      runningBalance: number;
      processingTime: Date;
      sortKey: number;
      alreadyUsedForSnapshot: boolean;
      dateUsedForSnapshot: Date;
      processed: boolean;
      eventTime: number;
      recordStatus: string ;
      credit: boolean;
      debit: boolean;
    }>;
    summary: {
      numberOfDebits: number;
      totalDebitAmount: number;
      numberOfCredits: number;
      totalCreditAmount: number;
      closingBalance: number;
    };
  };

  type MiniStatement = {
    statementEntryId: number;
    accountId: string;
    amountLcy: string;
    currencyLcy: string;
    amountFcy: string;
    amount: number;
    transactionCode: string;
    customerId: number;
    accountOfficer: string;
    productCategory: string;
    valueDate: string;
    currency: string;
    positionType: string;
    ourReference: string;
    exposureDate: string;
    currencyMarket: string;
    departmentCode: string;
    transReference: string ;
    systemId: string ;
    bookingDate: string;
    consolKey: string ;
    runningBalance: number;
    processingTime: Date;
    sortKey: number;
    alreadyUsedForSnapshot: boolean;
    dateUsedForSnapshot: Date;
    processed: boolean;
    eventTime: number;
    recordStatus: string ;
    credit: boolean;
    debit: boolean;
    transactionDetails: string;
  }